import {$, $$, getAttributes, getName, setAttributes} from '../utils/dom'
import {COMPONENTS_CREATION_MAP, COMPONENTS_IMPLEMENTATION_MAP, MIXINS_MAP} from '../globals'
import {autobindMethods, callOrAssign, defineProperties, evaluateAttributeExpressions, noop, panic} from '../utils/misc'
import {bindingTypes, template as createTemplate, expressionTypes} from '@riotjs/dom-bindings'
import cssManager from './css-manager'
import curry from 'curri'
import {isFunction} from '../utils/checks'
import {fromKebabCase, toKebabCase} from '../utils/kebab-case'

const COMPONENT_CORE = Object.freeze({
  // component helpers
  $(selector){ return $(selector, this.root) },
  $$(selector){ return $$(selector, this.root) },
  mixin(name) {
    // extend this component with this mixin
    Object.assign(this, MIXINS_MAP.get(name))
  },
  // defined during the component creation
  css: null,
  template: null
})

const COMPONENT_LIFECYCLE_METHODS = Object.freeze({
  onBeforeMount: noop,
  onMounted: noop,
  onBeforeUpdate: noop,
  onUpdated: noop,
  onBeforeUnmount: noop,
  onUnmounted: noop
})

const EMPTY_TEMPLATE_INTERFACE = {
  update: noop,
  mount: noop,
  unmount: noop,
  clone: noop
}

/**
 * Component definition function
 * @param   {Object} implementation - the componen implementation will be generated via compiler
 * @param   {Object} component - the component initial properties
 * @returns {Object} a new component implementation object
 */
export function defineComponent({css, template, tag, name}) {
  const componentAPI = callOrAssign(tag) || {}

  // add the component css into the DOM
  if (css && name) cssManager.add(name, css)

  return curry(createComponent)(defineProperties({
    ...COMPONENT_LIFECYCLE_METHODS,
    ...componentAPI,
    // defined during the component creation
    state: {},
    props: {},
    slots: null,
    root: null
  }, {
    // these properties should not be overriden
    ...COMPONENT_CORE,
    css,
    template: template ? template(
      createTemplate,
      expressionTypes,
      bindingTypes,
      function(name) {
        return (componentAPI.components || {})[name] || COMPONENTS_IMPLEMENTATION_MAP.get(name)
      }
    ) : EMPTY_TEMPLATE_INTERFACE
  }))
}

/**
 * Evaluate the component properties either from its real attributes or from its attribute expressions
 * @param   {HTMLElement} element - component root
 * @param   {Array}  attributeExpressions - attribute expressions generated by the riot compiler
 * @param   {Object} scope - current scope
 * @returns {Object} attributes key value pairs
 */
function evaluateProps(element, attributeExpressions = [], scope) {
  return attributeExpressions.length ?
    evaluateAttributeExpressions(attributeExpressions, scope) :
    fromKebabCase(getAttributes(element))
}

/**
 * Component creation factory function
 * @param   {Object} component - a component implementation previously defined
 * @param   {Array} options.slots - component slots generated via riot compiler
 * @param   {Array} options.attributes - attribute expressions generated via riot compiler
 * @returns {Riot.Component} a riot component instance
 */
export function createComponent(component, {slots, attributes}) {
  // if this component was manually mounted its DOM attributes are likely not attribute expressions
  // generated via riot compiler
  const shouldSetAttributes = attributes && attributes.length

  return autobindMethods(
    defineProperties(Object.create(component), {
      slots,
      mount(element, state = {}, props = {}) {
        this.props = evaluateProps(element, attributes, props)
        this.state = callOrAssign(state)

        defineProperties(this, {
          root: element,
          template: this.template.clone(element)
        })

        this.onBeforeMount()
        shouldSetAttributes && setAttributes(this.root, toKebabCase(this.props))
        this.template.mount(element, this)
        this.onMounted()

        return this
      },
      update(state = {}, props = {}) {
        const newProps = evaluateProps(this.root, attributes, props)

        if (this.onBeforeUpdate(newProps, state) === false) return

        this.props = {
          ...this.props,
          ...newProps
        }

        this.state = {
          ...this.state,
          ...state
        }

        shouldSetAttributes && setAttributes(this.root, toKebabCase(this.props))
        this.template.update(this)
        this.onUpdated()

        return this
      },
      unmount(removeRoot) {
        this.onBeforeUnmount()
        this.template.unmount(this, removeRoot === true)
        this.onUnmounted()

        return this
      }
    }),
    Object.keys(component).filter(prop => isFunction(component[prop]))
  )
}

/**
 * Component initialization function starting from a DOM node
 * @param   {HTMLElement} element - element to upgrade
 * @param   {Object} initialState - initial component state
 * @param   {string} componentName - component id
 * @returns {Object} a new component instance bound to a DOM node
 */
export function mountComponent(element, initialState, componentName) {
  const name = componentName || getName(element)
  if (!COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component named "${name}" was never registered`)
  const component = COMPONENTS_IMPLEMENTATION_MAP.get(name)({})
  COMPONENTS_CREATION_MAP.set(element, component)

  return component.mount(element, {}, initialState)
}
